@page "/statistic"
@inject HttpClient httpClient
@using System.Net.Http.Json

<PageTitle>Statistic</PageTitle>

<h1>Statistik</h1>
<p role="avg" style="margin: 0px; font-size: 1rem">Konsentrasi gas LPG rata-rata dalam 7 hari terakhir:</p>

<table class="table">
    <thead>
        <tr>
            <th>Waktu</th>
            <th>rata-rata PPM</th>
        </tr>
    </thead>
    <tbody>
        @for (int i = 0; i < _averages.Count; i++)
        {
            string label = i == 0 ? "Kemarin" : $"{i+1} hari yang lalu";
            string value =  float.IsNaN(@_averages[i]) ? "Data tidak tersedia" : $"{@_averages[i]}";
            <tr>
                <td>@label</td>
                <td>@value</td>
            </tr>
        }
    </tbody>
</table>

@code
{
    private List<float> _averages = new();
    private List<string> _dates = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            StateHasChanged();
            await QueryAsync();
            StateHasChanged();
        }
    }

    private async Task QueryAsync()
    {

        for (int i = 0; i < 7; i++)
        {
            List<GasRecord> gasRecords = new();
            var date = DateTime.Now.AddDays(-(i+1));
            var query = $"{date.Year}/{date.Month}/{date.Day}";
            var request = new HttpRequestMessage
            {
                RequestUri = new Uri($"http://mthrowaway488-001-site1.dtempurl.com/api/read/at?date={query}"),
                Method = HttpMethod.Get
            };
            request.Headers.Add("Accept", "*/*");
            var response = await httpClient.SendAsync(request);
            if(response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<List<GasRecord>>();
                gasRecords = result;

                float total = 0.0f;
                foreach(var record in gasRecords)
                {
                    total += record.Concentration;
                }

                _averages.Add((float)Math.Round(total/gasRecords.Count));
            }
        }
    }
}